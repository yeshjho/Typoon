name: Issues Management with Releases

on:
  release:
    types: [published]

env:
  PROJECT_ID: 3
  MAIN_BRANCH: main

jobs:
  issue_management_with_release:
    if: ${{ !github.event.release.draft }}
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      id: setup
      env:
        GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
      run: |
        gh api graphql -f query='
          query($user: String!) {
            user(login: $user) {
              projectV2(number: ${{ env.PROJECT_ID }}) {
                items(first: 100) {
                  nodes {
                    ... on ProjectV2Item {
                      id
                      content {
                        ... on ProjectV2ItemContent {
                          ... on Issue {
                            id
                          }
                        }
                      }
                      fieldValues(first: 10, orderBy: { direction: DESC, field: POSITION }) {
                        nodes {
                          ... on ProjectV2ItemFieldValue {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                              name
                            }
                            ... on ProjectV2ItemFieldTextValue {
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                              text
                            }
                          }
                        }
                      }
                    }
                  }
                }
                id
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        ' -f user="${{ github.repository_owner }}" > card_data.json

        echo 'project_id'=$(jq '.data.user.projectV2.id' card_data.json) >> $GITHUB_OUTPUT
        echo 'status_field_id'=$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' card_data.json) >> $GITHUB_OUTPUT
        echo 'pending_release_value_id'=$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name== "Pending Release") | .id' card_data.json) >> $GITHUB_OUTPUT
        echo 'released_value_id'=$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name== "Released") | .id' card_data.json) >> $GITHUB_OUTPUT

    - name: Clone Repo
      id: clone_repo
      env:
        GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
      run: |
        git clone --filter=blob:none --bare https://github.com/${{ github.repository }}.git repo

    - name: Process Issues
      id: process_issues
      env:
        GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
      run: |
        cd repo

        add_comment='
          mutation(
            $issue: ID!
            $body: String!
          ) {
            set_status: addComment(input: {
              subjectId: $issue
              body: $body
            }) {
              commentEdge {
                node {
                  id
                }
              }
            }
          }
        '

        close_issue='
          mutation(
            $issue: ID!
          ) {
            set_status: closeIssue(input: {
              issueId: $issue
            }) {
              issue {
                id
              }
            }
          }
        '

        move_item='
          mutation(
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }
        '

        state="id"

        jq -c '.data.user.projectV2.items.nodes[] | . as $node | .fieldValues.nodes | 
        reduce .[] as $fields ({}; 
        if $fields.field.name == "Status" then 
          .["Status"] = $fields.name 
        elif $fields.field.name == "Commit Fixed" then 
          .["Commit Fixed"] = $fields.text
        else
          .
        end) | select(.["Status"] == "Pending Release" and .["Commit Fixed"] != null) | $node.id, $node.content.id, .["Commit Fixed"]' ../card_data.json | while read i; do
          if [[ $state == "id" ]]; then
            card_id=$i
            state="issue"
            continue
          elif [[ $state == "issue" ]]; then
            issue=$i
            state="sha"
            continue
          else 
            sha=$(echo $i | tr -d '"')
            state="id"
          fi
          git branch --contains $sha | grep -E '(^|\s)${{ env.MAIN_BRANCH }}($|\s)' || continue
          gh api graphql -f query="$move_item" -f project=${{ steps.setup.outputs.project_id }} -f item=$card_id -f status_field=${{ steps.setup.outputs.status_field_id }} -f status_value=${{ steps.setup.outputs.released_value_id }}
          gh api graphql -f query="$add_comment" -f issue=$issue -f body=$'The fix was included in [${{ github.event.release.tag_name }}](${{ github.event.release.html_url }}).\n[${{ github.event.release.tag_name }}](${{ github.event.release.html_url }})에 수정사항이 포함되었습니다.'
          gh api graphql -f query="$close_issue" -f issue=$issue
        done